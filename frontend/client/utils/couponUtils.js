/**
 * Coupon Utilities - ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊¢◊ñ◊® ◊ú◊ò◊ô◊§◊ï◊ú ◊ë◊ß◊ï◊§◊ï◊†◊ô◊ù
 * ◊û◊õ◊ô◊ú ◊ú◊ï◊í◊ô◊ß◊™ ◊ó◊ô◊©◊ï◊ë ◊î◊†◊ó◊ï◊™, validation ◊ï◊§◊ï◊®◊û◊ò◊ô◊ù
 */

// ◊ß◊ë◊ï◊¢◊ô◊ù
export const COUPON_TYPES = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED'
};

export const APPLY_TO_TYPES = {
  SERVICE_FEE: 'SERVICE_FEE',
  TOTAL_AMOUNT: 'TOTAL_AMOUNT'
};

export const COUPON_ERROR_CODES = {
  NOT_FOUND: 'NOT_FOUND',
  EXPIRED: 'EXPIRED',
  INACTIVE: 'INACTIVE',
  MAX_USAGE_REACHED: 'MAX_USAGE_REACHED'
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊¢◊ñ◊® ◊ú◊§◊ï◊®◊û◊ò
export const formatCurrency = (amountCents) => {
  return `‚Ç™${(amountCents / 100).toFixed(2)}`;
};

export const formatDiscount = (coupon) => {
  if (coupon.discountType === COUPON_TYPES.PERCENTAGE) {
    return `${coupon.discountValue}%`;
  } else {
    return `‚Ç™${coupon.discountValue}`;
  }
};

export const formatApplyTo = (applyTo) => {
  return applyTo === APPLY_TO_TYPES.SERVICE_FEE ? '◊ì◊û◊ô ◊™◊§◊¢◊ï◊ú' : '◊°◊õ◊ï◊ù ◊õ◊ï◊ú◊ú';
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊ó◊ô◊©◊ï◊ë ◊û◊ß◊ï◊û◊ô◊ï◊™ (◊ú◊ë◊ì◊ô◊ß◊ï◊™ ◊û◊î◊ô◊®◊ï◊™)
export const calculateLocalDiscount = (coupon, parkingCostCents, operationalFeeCents) => {
  const totalAmountCents = parkingCostCents + operationalFeeCents;
  let discountAmountCents = 0;

  if (coupon.discountType === COUPON_TYPES.PERCENTAGE) {
    // ◊î◊†◊ó◊î ◊ë◊ê◊ó◊ï◊ñ◊ô◊ù
    if (coupon.applyTo === APPLY_TO_TYPES.SERVICE_FEE) {
      discountAmountCents = Math.round(operationalFeeCents * (coupon.discountValue / 100));
    } else {
      discountAmountCents = Math.round(totalAmountCents * (coupon.discountValue / 100));
    }
  } else {
    // ◊î◊†◊ó◊î ◊ß◊ë◊ï◊¢◊î
    const discountCents = coupon.discountValue * 100;
    if (coupon.applyTo === APPLY_TO_TYPES.SERVICE_FEE) {
      discountAmountCents = Math.min(discountCents, operationalFeeCents);
    } else {
      discountAmountCents = Math.min(discountCents, totalAmountCents);
    }
  }

  const finalAmountCents = totalAmountCents - discountAmountCents;
  const discountPercentage = (discountAmountCents / totalAmountCents) * 100;

  return {
    discountAmountCents,
    originalAmountCents: totalAmountCents,
    finalAmountCents,
    discountPercentage: Math.round(discountPercentage * 100) / 100
  };
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ validation ◊û◊ß◊ï◊û◊ô◊™
export const validateCouponLocally = (coupon) => {
  if (!coupon) {
    return { isValid: false, error: '◊ß◊ï◊§◊ï◊ü ◊ú◊ê ◊†◊û◊¶◊ê', errorCode: COUPON_ERROR_CODES.NOT_FOUND };
  }

  if (!coupon.isActive) {
    return { isValid: false, error: '◊ß◊ï◊§◊ï◊ü ◊ú◊ê ◊§◊¢◊ô◊ú', errorCode: COUPON_ERROR_CODES.INACTIVE };
  }

  const now = new Date();
  const validUntil = new Date(coupon.validUntil);
  if (now > validUntil) {
    return { isValid: false, error: '◊ß◊ï◊§◊ï◊ü ◊§◊í ◊™◊ï◊ß◊£', errorCode: COUPON_ERROR_CODES.EXPIRED };
  }

  if (coupon.maxUsage && coupon.usageCount >= coupon.maxUsage) {
    return { isValid: false, error: '◊î◊í◊ô◊¢ ◊ú◊û◊í◊ë◊ú◊™ ◊î◊©◊ô◊û◊ï◊©◊ô◊ù', errorCode: COUPON_ERROR_CODES.MAX_USAGE_REACHED };
  }

  return { isValid: true };
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ API ◊ú◊ë◊ì◊ô◊ß◊™ ◊ß◊ï◊§◊ï◊ü
export const validateCouponAPI = async (code, apiBaseUrl = 'http://10.0.0.23:4000') => {
  try {
    const response = await fetch(`${apiBaseUrl}/api/coupons/validate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ code: code.trim().toUpperCase() })
    });

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Coupon validation API error:', error);
    return {
      isValid: false,
      error: '◊©◊í◊ô◊ê◊î ◊ë◊ë◊ì◊ô◊ß◊™ ◊î◊ß◊ï◊§◊ï◊ü',
      errorCode: 'NETWORK_ERROR'
    };
  }
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ API ◊ú◊ó◊ô◊©◊ï◊ë ◊î◊†◊ó◊î
export const calculateDiscountAPI = async (code, parkingCostCents, operationalFeeCents, apiBaseUrl = 'http://10.0.0.23:4000') => {
  try {
    const response = await fetch(`${apiBaseUrl}/api/coupons/calculate-discount`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        code: code.trim().toUpperCase(),
        parkingCostCents,
        operationalFeeCents
      })
    });

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Discount calculation API error:', error);
    return {
      isValid: false,
      error: '◊©◊í◊ô◊ê◊î ◊ë◊ó◊ô◊©◊ï◊ë ◊î◊î◊†◊ó◊î',
      errorCode: 'NETWORK_ERROR'
    };
  }
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊ó◊ô◊©◊ï◊ë ◊ì◊û◊ô ◊™◊§◊¢◊ï◊ú
export const calculateOperationalFee = (parkingCostCents, feePercentage = 5) => {
  return Math.round(parkingCostCents * (feePercentage / 100));
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊ó◊ô◊©◊ï◊ë ◊û◊ó◊ô◊® ◊õ◊ï◊ú◊ú
export const calculateTotalPrice = (parkingCostCents, operationalFeeCents = null) => {
  const opFee = operationalFeeCents || calculateOperationalFee(parkingCostCents);
  return parkingCostCents + opFee;
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊§◊ï◊®◊û◊ò ◊î◊ï◊ì◊¢◊ï◊™ ◊©◊í◊ô◊ê◊î
export const formatCouponError = (errorCode, error) => {
  const errorMessages = {
    [COUPON_ERROR_CODES.NOT_FOUND]: '◊ß◊ï◊§◊ï◊ü ◊ú◊ê ◊†◊û◊¶◊ê ◊ë◊û◊¢◊®◊õ◊™',
    [COUPON_ERROR_CODES.EXPIRED]: '◊ß◊ï◊§◊ï◊ü ◊§◊í ◊™◊ï◊ß◊£',
    [COUPON_ERROR_CODES.INACTIVE]: '◊ß◊ï◊§◊ï◊ü ◊ú◊ê ◊§◊¢◊ô◊ú ◊õ◊®◊í◊¢',
    [COUPON_ERROR_CODES.MAX_USAGE_REACHED]: '◊î◊ß◊ï◊§◊ï◊ü ◊î◊í◊ô◊¢ ◊ú◊û◊í◊ë◊ú◊™ ◊î◊©◊ô◊û◊ï◊©◊ô◊ù',
    'NETWORK_ERROR': '◊©◊í◊ô◊ê◊™ ◊®◊©◊™ - ◊†◊°◊î ◊©◊ï◊ë'
  };

  return errorMessages[errorCode] || error || '◊©◊í◊ô◊ê◊î ◊ú◊ê ◊ô◊ì◊ï◊¢◊î';
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊ô◊¶◊ô◊®◊™ ◊°◊ô◊õ◊ï◊ù ◊î◊†◊ó◊î
export const createDiscountSummary = (coupon, discount) => {
  return {
    couponCode: coupon.code,
    discountType: coupon.discountType,
    discountValue: coupon.discountValue,
    applyTo: coupon.applyTo,
    discountAmount: discount.discountAmountCents / 100,
    originalAmount: discount.originalAmountCents / 100,
    finalAmount: discount.finalAmountCents / 100,
    discountPercentage: discount.discountPercentage,
    savings: discount.discountAmountCents / 100
  };
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊ß◊ï◊§◊ï◊ü ◊™◊ß◊£ ◊ú◊©◊ô◊û◊ï◊©
export const isCouponUsable = (coupon) => {
  const validation = validateCouponLocally(coupon);
  return validation.isValid;
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊ó◊ô◊©◊ï◊ë ◊ñ◊û◊ü ◊™◊§◊ï◊í◊î
export const getTimeUntilExpiry = (validUntil) => {
  const now = new Date();
  const expiry = new Date(validUntil);
  const diffMs = expiry - now;
  
  if (diffMs <= 0) {
    return '◊§◊í ◊™◊ï◊ß◊£';
  }

  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (days > 0) {
    return `${days} ◊ô◊û◊ô◊ù`;
  } else if (hours > 0) {
    return `${hours} ◊©◊¢◊ï◊™`;
  } else {
    return '◊§◊ó◊ï◊™ ◊û◊©◊¢◊î';
  }
};

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ debug ◊ú◊ë◊ì◊ô◊ß◊ï◊™
export const debugCoupon = (coupon, parkingCostCents, operationalFeeCents) => {
  console.log('üéüÔ∏è Coupon Debug Info:');
  console.log('Coupon:', coupon);
  console.log('Parking Cost (cents):', parkingCostCents);
  console.log('Operational Fee (cents):', operationalFeeCents);
  
  const validation = validateCouponLocally(coupon);
  console.log('Validation:', validation);
  
  if (validation.isValid) {
    const discount = calculateLocalDiscount(coupon, parkingCostCents, operationalFeeCents);
    console.log('Discount:', discount);
    
    const summary = createDiscountSummary(coupon, discount);
    console.log('Summary:', summary);
  }
};

export default {
  COUPON_TYPES,
  APPLY_TO_TYPES,
  COUPON_ERROR_CODES,
  formatCurrency,
  formatDiscount,
  formatApplyTo,
  calculateLocalDiscount,
  validateCouponLocally,
  validateCouponAPI,
  calculateDiscountAPI,
  calculateOperationalFee,
  calculateTotalPrice,
  formatCouponError,
  createDiscountSummary,
  isCouponUsable,
  getTimeUntilExpiry,
  debugCoupon
};
