// scheduler.ts - ◊û◊™◊ñ◊û◊ü ◊¢◊ë◊ï◊ì◊ï◊™ ◊®◊ß◊¢
import cron from 'node-cron';
import { processMonthlyPayouts } from './monthly-payouts.job';

/**
 * ◊î◊™◊ó◊ú◊™ ◊û◊™◊ñ◊û◊ü ◊î◊¢◊ë◊ï◊ì◊ï◊™ ◊î◊®◊ß◊¢
 */
export function startJobScheduler() {
  console.log('üïê Starting job scheduler...');

  // ◊™◊©◊ú◊ï◊û◊ô◊ù ◊ó◊ï◊ì◊©◊ô◊ô◊ù - ◊ë-1 ◊ú◊õ◊ú ◊ó◊ï◊ì◊© ◊ë◊©◊¢◊î 09:00
  cron.schedule(
    '0 9 1 * *',
    async () => {
      console.log('üí∞ Running scheduled monthly payouts job...');
      try {
        const result = await processMonthlyPayouts();
        console.log('üí∞ Scheduled monthly payouts completed:', result);
      } catch (error) {
        console.error('‚ùå Error in scheduled monthly payouts:', error);
      }
    },
    {
      timezone: 'Asia/Jerusalem',
    }
  );

  // ◊ë◊ì◊ô◊ß◊™ ◊ë◊®◊ô◊ê◊ï◊™ ◊û◊¢◊®◊õ◊™ - ◊õ◊ú ◊ô◊ï◊ù ◊ë◊©◊¢◊î 08:00
  cron.schedule(
    '0 8 * * *',
    async () => {
      console.log('üè• Running daily health check...');
      try {
        await performHealthCheck();
      } catch (error) {
        console.error('‚ùå Error in health check:', error);
      }
    },
    {
      timezone: 'Asia/Jerusalem',
    }
  );

  console.log('‚úÖ Job scheduler started successfully');
  console.log('üìÖ Monthly payouts: 1st of every month at 09:00 IST');
  console.log('üè• Health check: Every day at 08:00 IST');
}

/**
 * ◊ë◊ì◊ô◊ß◊™ ◊ë◊®◊ô◊ê◊ï◊™ ◊û◊¢◊®◊õ◊™
 */
async function performHealthCheck() {
  const { prisma } = await import('../lib/prisma');

  try {
    // ◊ë◊ì◊ô◊ß◊™ ◊ó◊ô◊ë◊ï◊® ◊ú◊û◊°◊ì ◊†◊™◊ï◊†◊ô◊ù
    await prisma.$queryRaw`SELECT 1`;

    // ◊ë◊ì◊ô◊ß◊™ ◊¢◊û◊ú◊ï◊™ ◊©◊ú◊ê ◊¢◊ï◊ë◊ì◊ï (◊ê◊ñ◊î◊®◊î ◊ê◊ù ◊ô◊© ◊ô◊ï◊™◊® ◊û-100)
    const unpaidCommissions = await prisma.commission.count({
      where: { payoutProcessed: false },
    });

    if (unpaidCommissions > 100) {
      console.warn(`‚ö†Ô∏è High number of unpaid commissions: ${unpaidCommissions}`);
    }

    // ◊ë◊ì◊ô◊ß◊™ ◊™◊©◊ú◊ï◊û◊ô◊ù ◊©◊†◊õ◊©◊ú◊ï
    const failedPayouts = await prisma.ownerPayout.count({
      where: { status: 'FAILED' },
    });

    if (failedPayouts > 0) {
      console.warn(`‚ö†Ô∏è Failed payouts detected: ${failedPayouts}`);
    }

    console.log('‚úÖ Health check passed', {
      unpaidCommissions,
      failedPayouts,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('‚ùå Health check failed:', error);
  }
}
