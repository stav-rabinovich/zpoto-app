"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// quick-fix.routes.ts - ◊™◊ô◊ß◊ï◊ü ◊û◊ô◊ô◊ì◊ô ◊ú◊û◊©◊™◊û◊© ◊ó◊°◊ï◊ù
const express_1 = require("express");
const prisma_1 = require("../lib/prisma");
const auth_1 = require("../middlewares/auth");
const r = (0, express_1.Router)();
// ◊õ◊ú ◊î-routes ◊ì◊ï◊®◊©◊ô◊ù ◊î◊®◊©◊ê◊ï◊™ Admin
r.use(auth_1.requireAdmin);
/**
 * POST /api/quick-fix/unblock-user/:id
 * ◊ë◊ô◊ò◊ï◊ú ◊ó◊°◊ô◊û◊î ◊û◊ô◊ô◊ì◊ô ◊ú◊û◊©◊™◊û◊© ◊°◊§◊¶◊ô◊§◊ô
 */
r.post('/unblock-user/:id', async (req, res, next) => {
    try {
        const userId = Number(req.params.id);
        if (isNaN(userId)) {
            return res.status(400).json({ error: 'Invalid user ID' });
        }
        console.log(`üîß Quick fix: Unblocking user ${userId}`);
        // ◊ë◊ì◊ô◊ß◊™ ◊î◊û◊©◊™◊û◊© ◊ú◊§◊†◊ô ◊î◊™◊ô◊ß◊ï◊ü
        const userBefore = await prisma_1.prisma.user.findUnique({
            where: { id: userId },
            select: {
                id: true,
                email: true,
                role: true,
                isBlocked: true,
                name: true
            }
        });
        if (!userBefore) {
            return res.status(404).json({ error: 'User not found' });
        }
        console.log('üë§ User before fix:', userBefore);
        // ◊™◊ô◊ß◊ï◊ü ◊î◊û◊©◊™◊û◊© - ◊î◊ó◊ñ◊®◊î ◊ú◊û◊¶◊ë ◊û◊ó◊§◊© ◊ó◊†◊ô◊î ◊®◊í◊ô◊ú
        const userAfter = await prisma_1.prisma.user.update({
            where: { id: userId },
            data: {
                role: 'USER', // ◊î◊ó◊ñ◊®◊î ◊ú◊û◊ó◊§◊© ◊ó◊†◊ô◊î
                isBlocked: false // ◊ë◊ô◊ò◊ï◊ú ◊ó◊°◊ô◊û◊î
            }
        });
        console.log('‚úÖ User after fix:', {
            id: userAfter.id,
            email: userAfter.email,
            role: userAfter.role,
            isBlocked: userAfter.isBlocked
        });
        // ◊û◊ó◊ô◊ß◊™ ◊õ◊ú ◊î◊ó◊†◊ô◊ï◊™ ◊©◊ú ◊î◊û◊©◊™◊û◊© (◊ê◊ù ◊ô◊©)
        const deletedParkings = await prisma_1.prisma.parking.deleteMany({
            where: { ownerId: userId }
        });
        console.log(`üóëÔ∏è Deleted ${deletedParkings.count} parkings for user ${userId}`);
        res.json({
            success: true,
            message: `User ${userId} fixed successfully`,
            data: {
                userBefore,
                userAfter: {
                    id: userAfter.id,
                    email: userAfter.email,
                    role: userAfter.role,
                    isBlocked: userAfter.isBlocked
                },
                deletedParkings: deletedParkings.count
            }
        });
    }
    catch (error) {
        console.error('‚ùå Error in quick fix:', error);
        next(error);
    }
});
/**
 * GET /api/quick-fix/user-status/:id
 * ◊ë◊ì◊ô◊ß◊™ ◊°◊ò◊ò◊ï◊° ◊û◊©◊™◊û◊©
 */
r.get('/user-status/:id', async (req, res, next) => {
    try {
        const userId = Number(req.params.id);
        if (isNaN(userId)) {
            return res.status(400).json({ error: 'Invalid user ID' });
        }
        const user = await prisma_1.prisma.user.findUnique({
            where: { id: userId },
            select: {
                id: true,
                email: true,
                name: true,
                role: true,
                isBlocked: true,
                createdAt: true
            }
        });
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        const parkingsCount = await prisma_1.prisma.parking.count({
            where: { ownerId: userId }
        });
        const listingRequests = await prisma_1.prisma.listingRequest.findMany({
            where: { userId },
            select: { id: true, status: true, createdAt: true },
            orderBy: { createdAt: 'desc' }
        });
        res.json({
            success: true,
            data: {
                user,
                parkingsCount,
                listingRequests,
                diagnosis: {
                    isProblematic: user.role === 'OWNER' && parkingsCount === 0,
                    isBlocked: user.isBlocked,
                    hasRequests: listingRequests.length > 0
                }
            }
        });
    }
    catch (error) {
        console.error('‚ùå Error checking user status:', error);
        next(error);
    }
});
exports.default = r;
